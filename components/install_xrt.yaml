name: InstallXRT
description: Installs the XRT based on the supplied Vitis tool version.
schemaVersion: 1.0
parameters:
  - vitis_tool_version:
      type: string
      default: "2024.1"
      description: "Vitis tool version."
phases:
    - name: install_xrt
      steps:
        - name: InstallXRT
          action: ExecuteBash
          inputs:
            commands:
                - |
                  function info_msg {
                    echo "[INFO] $1"
                  }


                  function err_msg {
                    echo "[ERROR] $1"
                  }


                  distro=$(sed -n 's/^NAME="\([^"]*\)"/\1/p' /etc/os-release)
                  distro=${distro// /}


                  export VITIS_TOOL_VER={{ parameter.vitis_tool_version }}
                  info_msg "VITIS_TOOL_VER = ${VITIS_TOOL_VER}"

                  # TODO: How does this change based on the Vivado/Vitis Lab Installation??
                  declare -A xilinx_vitis_map
                  xilinx_vitis_map["2024.1"]="/opt/Xilinx/Vitis/${VITIS_TOOL_VER}"
                  xilinx_vitis_map["2024.2"]="/opt/Xilinx/Vitis/${VITIS_TOOL_VER}"
                  xilinx_vitis_map["2025.1"]="/opt/Xilinx/${VITIS_TOOL_VER}/Vitis"


                  function check_xilinx_vitis {

                      # TODO: How does this path change with the Vivado/Vitis Lab Install??
                      export XILINX_VITIS="${xilinx_vitis_map[$VITIS_TOOL_VER]"

                      # TODO: How does this path change with the Vivado/Vitis Lab Install??
                      if [[ -z $XILINX_VITIS ]]; then
                          err_msg "XILINX_VITIS not set!"
                          return 1
                      fi
                      return 0
                  }

                  declare -A valid_tool_versions
                  valid_tool_versions["2024.1"]="true"
                  valid_tool_versions["2024.2"]="true"
                  valid_tool_versions["2025.1"]="true"

                  declare -A valid_os
                  valid_os["Ubuntu"]="true"
                  valid_os["RockyLinux"]="true"


                  function check_os_and_tool_ver {
                      if [[ "${valid_tool_versions[${VITIS_TOOL_VER}]}" != "true" ]]; then
                          err_msg "Unsupported Vivado tool version detected: ${VITIS_TOOL_VER}!!!"
                          info_msg "Supported versions are: 2024.1, 2024.2, and 2025.1"
                          return 1
                      fi

                      echo "Distro: ${distro}"
                      if [[ "${valid_os[${distro}]}" != "true" ]]; then
                          err_msg "Unsupported OS detected!!!"
                          info_msg "Supported OS are: Ubuntu 24.04, Ubuntu 20.04, and Rocky Linux 8.10"
                          return 1
                      fi
                      return 0
                  }


                  # TODO: Will this work/be a thing with the Vivado Lab Install??
                  function check_icd {
                      icd_path=/etc/OpenCL/vendors/xilinx.icd
                      icd_so_entry=libxilinxopencl.so

                      info_msg "Checking for ICD installation"
                      if [[ $(cat $icd_path) == *"${icd_so_entry}"* ]]; then
                          info_msg "Found ${icd_so_entry}"
                      else
                          motd_contents=$(cat /etc/motd)
                          if [[ "${motd_contents}" == *"aws-fpga"* ]]; then
                              err_msg "No entry for ${icd_so_entry} found in ${icd_path} on Developer AMI!"
                              info_msg "Please submit a question on RePost under the FPGA Development tag: "
                              info_msg "    https://repost.aws/questions?view=all\&sort=recent\&tagIds=TAc7ofO5tbQRO57aX1lBYbjA"
                              return 1
                          else
                              info_msg "Detected use of non FPGA Developer AMI!"
                              info_msg "Make sure that your OpenCL ICD installation is valid for ${icd_so_entry}!"
                          fi
                      fi
                      return 0
                  }


                  declare -A xrt_install_map
                  xrt_install_map["Ubuntu_pkg_ext"]="deb"
                  xrt_install_map["Ubuntu_install_cmd"]="sudo dpkg -i"
                  xrt_install_map["Ubuntu_xrt_pkg_prefix"]="amd64-xrt"
                  xrt_install_map["Ubuntu_aws_pkg_prefix"]="amd64-aws"


                  function build_and_install_xrt {
                      if ! sudo -E ./$xrt_deps_script_path; then
                          err_msg "Couldn't install XRT dependencies!"
                          cd $AWS_FPGA_REPO_DIR && return 1
                      fi

                      if ! ./$xrt_build_script_run; then
                          err_msg "Couldn't build XRT dpkgs!"
                          cd $AWS_FPGA_REPO_DIR && return 1
                      fi

                      cd $xrt_build_release_dir

                      install_pkg_ext="${xrt_install_map[${distro}_pkg_ext]}"
                      xrt_pkg_prefix="${xrt_install_map[${distro}_xrt_pkg_prefix]}"
                      aws_pkg_prefix="${xrt_install_map[${distro}_aws_pkg_prefix]}"
                      install_cmd="${xrt_install_map[${distro}_install_cmd]}"

                      # Base XRT install first
                      for file in $(ls *${xrt_pkg_prefix}.${install_pkg_ext}); do
                          info_msg "Installing $file"
                          $install_cmd $file
                      done

                      # AWS extension install
                      for file in $(ls *${aws_pkg_prefix}.${install_pkg_ext}); do
                          info_msg "Installing $file"
                          $install_cmd $file
                      done

                      if ! source $xrt_setup_script_path; then
                          err_msg "Couldn't setup XRT after install!"
                          cd $AWS_FPGA_REPO_DIR && return 1
                      fi

                      info_msg "XRT installation complete!"
                      cd $AWS_FPGA_REPO_DIR
                      return 0
                  }


                  function set_up_xrt_repo {
                      if [[ -n "$(echo $PATH | grep "cmake-3.3.2")" ]]; then
                          export PATH="/usr/bin:$PATH"
                      fi
                      cd $HOME
                      if [[ ! -d $xrt_repo_name ]]; then
                          info_msg "Cloning XRT repo into home directory: ${HOME}"
                          info_msg "This directory may be moved to any destination, once the XRT install is complete!"
                          if ! git clone "${xrt_repo_url}" -b  --recurse-submodules; then
                              err_msg "Couldn't clone XRT repository!"
                              cd $AWS_FPGA_REPO_DIR && return 1
                          fi
                      else
                          info_msg "XRT repo found in ${HOME}"
                      fi

                      cd $xrt_repo_name
                      if ! git checkout $xrt_working_commit_hash; then
                          err_msg "Couldn't checkout compatible commit: ${xrt_working_commit_hash}!"
                          cd $AWS_FPGA_REPO_DIR && return 1
                      fi
                      return 0
                  }


                  declare -A commit_hash_map
                  commit_hash_map["2024.1"]="a0729c69dba1ec05856d3008fbf9994a665f276c"
                  commit_hash_map["2024.2"]="d8cf77af92e92324b038d787773b78fb7a44f812"
                  commit_hash_map["2025.1"]="eae6fc2339345d5cbb0d977e5d9c248f84b3ccd1"


                  function set_up_xrt_vars {
                      xrt_path="/opt/xilinx/xrt"
                      xrt_dpkg_install_path="${xrt_path}/XRT/build/Release"

                      xrt_repo_name="XRT"
                      xrt_repo_url="https://github.com/Xilinx/XRT.git"
                      xrt_deps_script_path="src/runtime_src/tools/scripts/xrtdeps.sh"
                      xrt_build_script_run="build/build.sh -noert"
                      xrt_build_release_dir="build/Release"
                      xrt_setup_script_path="${xrt_path}/setup.sh"
                      xrt_branch="${VITIS_TOOL_VER}"
                      xrt_working_commit_hash="${commit_hash_map[${VITIS_TOOL_VER}]}"

                      return 0
                  }


                  function install_xrt {
                      if ! set_up_xrt_vars; then
                          return 1
                      fi

                      if [[ -n $(lsmod | grep "xdma") ]]; then
                          info_msg "###############################################################################"
                          info_msg "#                      XDMA driver install detected!                          #"
                          info_msg "#             XDMA driver install prevents XRT functionality!                 #"
                          info_msg "#              Uninstall XDMA driver and re-run 'install_xrt'                 #"
                          info_msg "###############################################################################"
                          cd $AWS_FPGA_REPO_DIR && return 1
                      fi

                      if [[ -z $(lsmod | grep "xocl") ]]; then
                          if ! set_up_xrt_repo; then
                              return 1
                          fi

                          if ! build_and_install_xrt; then
                              return 1
                          fi
                      fi
                      info_msg "XRT already installed!"
                      info_msg "Nothing to do!"
                      return 0
                  }


                  function sha256_check {
                      sha_file=$1
                      xsa_file=$2
                      s3_sha=$(awk '{print $1}' $sha_file)
                      local_sha=$(sha256sum "$2" | awk '{print $1}')

                      if [[ "${s3_sha}" != "${local_sha}" ]]; then
                          err_msg "SHA256 mismatch for $2"
                          info_msg "Moving existing $2 to $2.back"
                          sudo mv $2 $2.back
                          return 1
                      fi

                      return 0
                  }


                  function get_sha_file {
                      missing_sha="${missing_xsa}.sha256"
                      sha_path="${destination_dir}/${missing_sha}"
                      if [ ! -e "${sha_path}" ]; then
                          if ! sudo wget "${vitis_xsa_s3_url}/${missing_sha}" -O "${sha_path}" -q; then
                              err_msg "Download of Vitis XSA SHA256 file ${missing_sha} failed!"
                              return 1
                          fi
                      fi

                      xsa_path="${destination_dir}/${missing_xsa}"
                      if ! sha256_check "${sha_path}" "${xsa_path}"; then
                          sha_mismatches=1
                      fi
                      return 0
                  }


                  function get_xsa_file {
                      # Set up the directory where the XSA file will live
                      destination_dir="${vitis_xpfm_dir}"
                      category_dir=""
                      if [[ "${missing_xsa}" != "${vitis_xpfm}" ]]; then
                          # Gets the stem of the XSA file: hw, hw_emu, sw
                          category_dir=$(echo "${missing_xsa%.*}")
                          destination_dir="${destination_dir}/${category_dir}"
                      fi

                      # Remove the old XSA
                      missing_xsa_file_extension="${missing_xsa##*.}"
                      sudo rm -f "${destination_dir}/*.${missing_xsa_file_extension}"

                      # Grab the new XSA
                      if ! sudo wget "${vitis_xsa_s3_url}/${missing_xsa}" -O "${destination_dir}/${missing_xsa}"  -q; then
                          err_msg "Download of Vitis XSA file ${missing_xsa} failed!"
                          return 1
                      fi

                      return 0
                  }


                  function create_xsa_dirs {
                      # TODO: How does this path change with the Vivado/Vitis Lab Install??
                      vitis_xpfm_dir=$XILINX_VITIS/platforms

                      vitis_hw_dir=$vitis_xpfm_dir/hw
                      vitis_hw_emu_dir=$vitis_xpfm_dir/hw_emu
                      vitis_sw_dir=$vitis_xpfm_dir/sw

                      xsa_dirs=(
                          "${vitis_hw_dir}"
                          "${vitis_hw_emu_dir}"
                          "${vitis_sw_dir}"
                      )

                      for dir in "${xsa_dirs[@]}"; do
                          if [ -d $dir ]; then
                              sudo rm -rf $dir
                          fi
                          if ! sudo mkdir -p $dir; then
                              err_msg "Couldn't create directory $dir!"
                              return 1
                          fi
                      done
                      return 0
                  }


                  declare -A xsa_dir_map
                  xsa_dir_map["2024.1"]="2024_1_2"
                  xsa_dir_map["2024.2"]="2024_2"
                  xsa_dir_map["2025.1"]="2024_2"

                  declare -A xsa_map
                  xsa_map["2024.1"]="202410_1_2"
                  xsa_map["2024.2"]="202420_2"
                  xsa_map["2025.1"]="202420_2"


                  function set_up_xsa {
                      info_msg "Installing supporting libraries"

                      # TODO: How does this path change with the Vivado/Vitis Lab Install??
                      sudo $XILINX_VITIS/scripts/installLibs.sh >>/dev/null

                      rm installLibs.sh_*

                      # Get XSA for right tool version
                      xsa_for_tool_ver="${xsa_map[${VITIS_TOOL_VER}]}"
                      export AWS_PLATFORM="AWS_PLATFORM_${xsa_for_tool_ver}""
                      info_msg "The default AWS Platform has been set to: \"AWS_PLATFORM=${AWS_PLATFORM}\" "

                      XSA="xilinx_aws-vu47p-f2_${xsa_for_tool_ver}"
                      export SHELL_EMU_VERSION="${XSA}"

                      XSA_S3_BASE_DIR="xsa_f2_${xsa_dir_map[${VITIS_TOOL_VER}]}"

                      if ! create_xsa_dirs; then
                          return 1
                      fi

                      # set a variable to point to the platform for build and emulation runs
                      vitis_xpfm="${XSA}.xpfm"

                      # TODO: How does this path change with the Vivado/Vitis Lab Install??
                      export PLATFORM_REPO_PATHS="${XILINX_VITIS}/platforms/${vitis_xpfm}"

                      # Grab all XSAs, check their SHAs, and move to necessary Vitis dir
                      xsas=(
                          "hw.xsa"
                          "hw_emu.xsa"
                          "sw.spfm"
                          "${vitis_xpfm}"
                      )

                      sha_mismatches=0
                      vitis_xsa_s3_url="https://aws-fpga-hdk-resources.s3.amazonaws.com/Vitis/${XSA_S3_BASE_DIR}/${XSA}"
                      for missing_xsa in "${xsas[@]}"; do
                          if ! get_xsa_file; then
                              return 1
                          fi

                          if ! get_sha_file; then
                              return 1
                          fi
                      done

                      if [ $sha_mismatches -ne 0 ]; then
                          return 1
                      fi
                  }


                  function main {

                      if ! set_up_xsa; then
                        err_msg "!!! XSA Setup FAILED !!!"
                        cd "${HOME}"
                        return 1
                      fi

                      if ! install_xrt; then
                        err_msg "!!! XRT Setup FAILED !!!"
                        cd "${HOME}"
                        return 1
                      fi

                      cd "${HOME}"
                      info_msg "XRT Install Succeeded!"
                      return 0
                  }

                  main